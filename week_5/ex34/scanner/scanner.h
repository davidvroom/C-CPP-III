// Generated by Flexc++ V2.06.04 on Mon, 19 Mar 2018 14:57:38 +0100

#ifndef Scanner_H_INCLUDED_
#define Scanner_H_INCLUDED_

// $insert baseclass_h
#include "scannerbase.h"

#include <fstream>  // toegevoegd
#include <cstdio>   // toegevoegd

// $insert classHead
class Scanner: public ScannerBase
{   
    std::string d_fileName;     // toegevoegd
    std::string d_gslFileName; // toegevoegd
    std::ofstream d_gsl;        // toegevoegd
    size_t d_counter = 0;       // toegevoegd

    public:

        explicit Scanner(std::istream &in = std::cin,
                                std::ostream &out = std::cout);

        Scanner(std::string const &infile, std::string const &outfile);

        explicit Scanner(std::string const &file);   // toegevoegd
        
        void finish();

        // $insert lexFunctionDecl
        int lex();

    private:
        int lex__();
        int executeAction__(size_t ruleNr);

        void print();
        void preCode();     // re-implement this function for code that must 
                            // be exec'ed before the patternmatching starts

        void postCode(PostEnum__ type);    
                            // re-implement this function for code that must 
                            // be exec'ed after the rules's actions.
};

// $insert scannerConstructors
inline Scanner::Scanner(std::istream &in, std::ostream &out)
:
    ScannerBase(in, out)
{}

inline Scanner::Scanner(std::string const &infile, std::string const &outfile)
:
    ScannerBase(infile, outfile)
{}

// toegevoegd
inline Scanner::Scanner(std::string const &file)
:   
    ScannerBase(file, std::string{file} + ".tmp"),
    d_fileName(file),
    d_gslFileName(file.substr(0, file.find_last_of(".")) + ".gsl"),
    //d_bareFileName(file.substr(0, file.find_last_of("."))),
    //d_gsl(d_bareFileName + ".gsl")
    d_gsl(d_gslFileName)
{
    //size_t idx = file.find_last_of(".");
    //std::ofstream ofile{file.substr(0,idx) + ".gsl"};
    //d_gsl = ofile;
}

inline void Scanner::finish()
{
    int rc = std::rename((d_fileName + ".tmp").c_str(), d_fileName.c_str());
    std::cout << rc << '\n';
}



// $insert inlineLexFunction
inline int Scanner::lex()
{
    return lex__();
}

inline void Scanner::preCode() 
{
    // optionally replace by your own code
}

inline void Scanner::postCode([[maybe_unused]] PostEnum__ type) 
{
    // optionally replace by your own code
}

inline void Scanner::print() 
{
    print__();
}


#endif // Scanner_H_INCLUDED_

