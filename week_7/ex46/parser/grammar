%class-name Parser

%filenames parser
%parsefun-source parse.cc

%baseclass-preinclude rulevalue.h
%stype RuleValue

%scanner ../scanner/scanner.h

%token  NUMBER
        IDENT

%right  '=' 
        ADDASSIGN 
        SUBASSIGN
        MULASSIGN
        DIVASSIGN
        MODASSIGN
        LSHIFTASSIGN
        RSHIFTASSIGN
        ANDASSIGN
        XORASSIGN
        ORASSIGN   

%left   '|'
%left   '^'
%left   '&'

%left   LSHIFT
        RSHIFT

%left   '+' '-'
%left   '*' '/' '%'
%right  uMinus '~'

// %debug

%%

lines:
    lines line
|
    line
;


line:
    expr '\n'
    {
        display($1);
    }
|
    error '\n'    
    {
        prompt();
    }
|
    '\n'
    {
        prompt();
    }
;


expr:
    NUMBER
    {
        $$ = value();
    }
|
    IDENT
    {
        $$ = variable();
    }
|
    '-' expr            %prec uMinus
    {
        $$ = unaryOp('-', $2);
    }
|
    '~' expr
    {
        $$ = unaryOp('~', $2);
    }
|
    expr '+' expr
    {
        $$ = binaryOp($1, '+', $3);
    }    
|
    expr '-' expr
    {
        $$ = binaryOp($1, '-', $3);
    }    
|
    expr '*' expr
    {
        $$ = binaryOp($1, '*', $3);
    }
|
    expr '/' expr
    {
        $$ = binaryOp($1, '/', $3);
    }
| 
    expr '%' expr
    {
        $$ = binaryOp($1, '%', $3);
    }
| 
    expr '&' expr
    {
        $$ = binaryOp($1, '&', $3);
    }
|
    expr '|' expr
    {
        $$ = binaryOp($1, '|', $3);
    }
| 
    expr '^' expr
    {
        $$ = binaryOp($1, '^', $3);
    }
|
    expr LSHIFT expr
    {
        $$ = binaryOp($1, '<', $3);
    }
|
    expr RSHIFT expr
    {
        $$ = binaryOp($1, '>', $3);
    }
|
    '(' expr ')'
    {
        $$ = $2;
    }
|
    expr '=' expr
    {
        $$ = assign($1, $3);
    }
|
    expr ADDASSIGN expr
    {
        $$ = compAssign($1, '+', $3);
    }
|
    expr SUBASSIGN expr
    {
        $$ = compAssign($1, '-', $3);
    }
|
    expr MULASSIGN expr
    {
        $$ = compAssign($1, '*', $3);
    }
|
    expr DIVASSIGN expr
    {
        $$ = compAssign($1, '/', $3);
    }
|
    expr MODASSIGN expr
    {
        $$ = compAssign($1, '%', $3);
    }
|
    expr LSHIFTASSIGN expr
    {
        $$ = compAssign($1, '<', $3);
    }
|
    expr RSHIFTASSIGN expr
    {
        $$ = compAssign($1, '>', $3);
    }
|
    expr ANDASSIGN expr
    {
        $$ = compAssign($1, '&', $3);
    }
|
    expr XORASSIGN expr
    {
        $$ = compAssign($1, '^', $3);
    }
|
    expr ORASSIGN expr
    {
        $$ = compAssign($1, '|', $3);
    }
;

