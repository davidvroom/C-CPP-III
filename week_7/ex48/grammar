%target-directory parser
%class-name Parser
%filenames parser
%parsefun-source parse.cc

%baseclass-preinclude rulevalue.h
//%stype RuleValue

%polymorphic RULEVALUE: RuleValue; FUNC: std::string;
%type <RULEVALUE>   expr
%type <FUNC>        function

%scanner ../scanner/scanner.h

%token  NUMBER 
        IDENT
        EULER
        PI
        RAD
        DEG
        GRAD
        FUNCTION

%right  '='
%left   '+' '-'
%right  uMinus

// %debug

%%

lines:
    lines line
|
    line
;


line:
    expr '\n'
    {
        display($1);
    }
|
    error '\n'    
    {
        prompt();
    }
|
    '\n'
    {
        prompt();
    }
|
    RAD '\n'
    {
        setRad();
    }
|
    DEG '\n'
    {
        setDeg();
    }
|
    GRAD '\n'
    {
        setGrad();
    }
;


expr:
    NUMBER
    {
        $$ = value();
    }
|
    EULER
    {
        $$ = setValue(2.71828182845904523536);
    }
|
    PI
    {
        $$ = setValue(3.14159265358979323846);
    }
|
    IDENT
    {
        $$ = variable();
    }
|
    '-' expr            %prec uMinus
    {
        $$ = negate($2);
    }
|
    expr '+' expr
    {
        $$ = add($1, $3);
    }    
|
    expr '-' expr
    {
        $$ = sub($1, $3);

    }    
|
    '(' expr ')'
    {
        $$ = $2;
    }
|
    expr '=' expr
    {
        $$ = assign($1, $3);
    }
|
    function '(' expr ')'
    {
        $$ = callFunction($1, $3);
    }
;

function:
    FUNCTION
    {
        $$ = d_scanner.matched();
    }
;